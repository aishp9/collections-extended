from collections import MutableSequence, MutableSet, Sequence, Set
from typing import Any, Optional, Iterable, Hashable, Union

class _basesetlist(Sequence, Set):
    def __init__(
			self,
			iterable: Optional[Iterable[Hashable]] = ...,
			raise_on_duplicate: bool = ...,
	) -> None: ...
    def __contains__(self, value: Hashable): ...
    def __len__(self): ...
    def __getitem__(self, index: Union[int, slice]): ...
    def count(self, value: Hashable) -> int: ...
    def index(self, value: Hashable, start: int = ..., end: Optional[int] = ...): ...
    def __add__(self, other: Any): ...
    def issubset(self, other: Any): ...
    def issuperset(self, other: Any): ...
    def union(self, other: Any): ...
    def intersection(self, other: Any): ...
    def difference(self, other: Any): ...
    def symmetric_difference(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def __and__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def __xor__(self, other: Any): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def sub_index(self, sub: Any, start: int = ..., end: Optional[Any] = ...): ...
    def copy(self): ...

class setlist(_basesetlist, MutableSequence, MutableSet):
    def pop(self, index: int = ...): ...
    def clear(self) -> None: ...
    def __setitem__(self, index: Any, value: Any): ...
    def __delitem__(self, index: Any) -> None: ...
    def insert(self, index: Any, value: Any) -> None: ...
    def append(self, value: Any) -> None: ...
    def extend(self, values: Any) -> None: ...
    def __iadd__(self, values: Any): ...
    def remove(self, value: Any) -> None: ...
    def remove_all(self, elems_to_delete: Any) -> None: ...
    def add(self, item: Any) -> None: ...
    def update(self, values: Any) -> None: ...
    def discard_all(self, elems_to_delete: Any) -> None: ...
    def discard(self, value: Any) -> None: ...
    def difference_update(self, other: Any) -> None: ...
    def intersection_update(self, other: Any) -> None: ...
    def symmetric_difference_update(self, other: Any) -> None: ...
    def __isub__(self, other: Any): ...
    def __iand__(self, other: Any): ...
    def __ior__(self, other: Any): ...
    def __ixor__(self, other: Any): ...
    def shuffle(self, random: Optional[Any] = ...) -> None: ...
    def sort(self, *args: Any, **kwargs: Any) -> None: ...
    def swap(self, i: Any, j: Any) -> None: ...

class frozensetlist(_basesetlist, Hashable):
    def __hash__(self): ...
