# Stubs for collections_extended.range_map (Python 2)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._util import NOT_SET
from collections import Mapping, Set
from typing import Any, Optional

class MappedRange:
    start: Any = ...
    stop: Any = ...
    value: Any = ...
    def __init__(self, start: Any, stop: Any, value: Any) -> None: ...
    def __iter__(self) -> None: ...

class RangeMapView:
    def __init__(self, mapping: Any) -> None: ...
    def __len__(self): ...
    @property
    def mapping(self): ...

class RangeMapKeysView(RangeMapView, Set):
    def __contains__(self, key: Any): ...
    def __iter__(self) -> None: ...

class RangeMapItemsView(RangeMapView, Set):
    def __contains__(self, item: Any): ...
    def __iter__(self) -> None: ...

class RangeMapValuesView(RangeMapView):
    def __contains__(self, value: Any): ...
    def __iter__(self) -> None: ...

class RangeMap(Mapping):
    def __init__(self, iterable: Optional[Any] = ..., default_value: Any = ...) -> None: ...
    @classmethod
    def from_mapping(cls, mapping: Any): ...
    @classmethod
    def from_iterable(cls, iterable: Any): ...
    def ranges(self, start: Optional[Any] = ..., stop: Optional[Any] = ...) -> None: ...
    def __contains__(self, key: Any): ...
    def __iter__(self) -> None: ...
    def __bool__(self): ...
    __nonzero__: Any = ...
    def get(self, key: Any, restval: Optional[Any] = ...): ...
    def get_range(self, start: Optional[Any] = ..., stop: Optional[Any] = ...): ...
    def set(self, value: Any, start: Optional[Any] = ..., stop: Optional[Any] = ...) -> None: ...
    def delete(self, start: Optional[Any] = ..., stop: Optional[Any] = ...) -> None: ...
    def empty(self, start: Optional[Any] = ..., stop: Optional[Any] = ...) -> None: ...
    def clear(self) -> None: ...
    @property
    def start(self): ...
    @property
    def end(self): ...
    def __eq__(self, other: Any): ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __len__(self): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def __setslice__(self, i: Any, j: Any, value: Any) -> None: ...
    def __delslice__(self, i: Any, j: Any) -> None: ...
    def __getslice__(self, i: Any, j: Any) -> None: ...
